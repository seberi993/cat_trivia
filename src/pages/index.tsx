import { type NextPage } from "next";
import Head from "next/head";
import getTriviaFromAPI from "./api/getTriviaFromAPI";
import { useState } from "react";
import Image from "next/image";
import getCatFromAPI from "./api/getCatFromAPI";

const Home: NextPage = () => {
  const [question, setQuestion] = useState("...Loading...");
  const [correctAnswer, setCorrectAnswer] = useState("");
  const [firstTry, setFirstTry] = useState(true);
  const [score, setPlayerScore] = useState(0);
  const [inLootMenu, setInLootMenu] = useState(false);
  const [listOfCats, setListOfCats] = useState([""]);
  const [hint, setHint] = useState("");

  const catsOfThisRound: string[] = [];
  const price: number[] = [];

  async function initializeData() {
    loadNextQuestion();
    loadNextCats();
    setFirstTry(false);
  }

  const checkAnswer = () => {
    const userInput = document.getElementById(
      "fname"
    ) as HTMLInputElement | null;
    const value = userInput?.value;

    if (value != undefined && value != " ") {
      if (value.toLowerCase() === correctAnswer.toLowerCase()) {
        setInLootMenu(true);
        setHint("Good job! pick one");
        increaseScore(5);
        clearInput();
        loadNextQuestion();
      }
    }
  };

  const goBackToTrivia = () => {
    setHint("");
    decreaseScore(1);
    setInLootMenu(false);
    loadNextCats();
  };

  const loadNextQuestion = async () => {
    const trivia = await getTriviaFromAPI();
    setQuestion(trivia[0].question);
    setCorrectAnswer(trivia[0].answer);
  };

  const loadNextCats = async () => {
    const cats = await getCatFromAPI();
    for (let i = 0; i < cats.length; i++) {
      catsOfThisRound[i] = JSON.stringify(cats[i].url ?? "");
      catsOfThisRound[i] = catsOfThisRound[i]?.replaceAll('"', "") ?? "";
     
    }
    setListOfCats(catsOfThisRound);
  };

  const increaseScore = (amount: number) => {
    for (let i = 0; i < amount; i++) {
      setPlayerScore((score) => score + 1);
    }
  };

  const decreaseScore = (amount: number) => {
    for (let i = 0; i < amount; i++) {
      setPlayerScore((score) => score - 1);
    }
  };

  const clearInput = () => {
    const textArea = document.getElementById(
      "fname"
    ) as HTMLInputElement | null;
    if (textArea != null) {
      textArea.value = "";
    }
  };

  const cheat = () => {

    const textArea = document.getElementById(
      "fname"
    ) as HTMLInputElement | null;
    if (textArea != null) {
      textArea.value = correctAnswer;
    }
  };
  const checkForGif = (str:string) =>{
    if(str.includes(".gif")){
      console.log("FOUND GIF");
      return "legendary";
    }
    else{
      return"uncommon";
    }
  }

  return (
    <>
      <Head>
        <title>cats cats cats cats cats cats cats cats cats</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {inLootMenu ? (
        
        <div className=" min-h-screen max-h-screen bg-gradient-to-t from-background_dark to-background_bright ">
         <>
          <p className="absolute top-5 right-5 rounded-md bg-blue_light p-4 text-2xl text-white ">
            {score}
          </p>
          <p className="place-self-center text-4xl font-extrabold text-blue_light">
            {hint}
          </p>

          <div className="flex-auto">
            {listOfCats.map(function (value: string) {
              return (
                <div key={value}>
                <Image
                  className={`border-4 f border-${checkForGif(value)}} lex-col`}
                  src={value !== undefined && value ? value : ""}
                  alt={""}
                  width="200"
                  height="200"
                  
                ></Image>
                </div>
              );
            })}
            </div>
          </>
        </div>
        
      ) : (
        <main className=" grid min-h-screen place-items-center  bg-gradient-to-t from-background_dark to-background_bright">
          {firstTry ? (
            <button
              onClick={initializeData}
              className="rounded-full bg-blue_dark  px-8 py-4 font-bold text-white hover:bg-blue_light"
            >
              Start
            </button>
          ) : (
            <div className=" top-20 grid text-2xl font-extrabold text-text_field ">
              {question}

              <textarea
                onKeyPress={checkAnswer}
                id="fname"
                className="w-120 static  grid resize-none rounded-lg  border-4 border-blue_light bg-blue_light text-2xl text-white hover:border-blue_dark"
              ></textarea>
              <button
                onClick={cheat}
                className=" absolute top-0 left-80 rounded-full bg-blue_light py-2 px-4 font-bold text-white hover:bg-blue_dark"
              >
                Cheat
              </button>
            </div>
          )}
        </main>
      )}
    </>
  );
};

export default Home;
