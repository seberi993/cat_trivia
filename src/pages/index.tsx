import { type NextPage } from "next";
import Head from "next/head";
import getTriviaFromAPI from "./api/getTriviaFromAPI";
import { useState } from "react";
import Image from "next/image";
import getCatFromAPI from "./api/getCatFromAPI";
import pickRandomBorder from '../utils/pickRandomBorder'



/*
AVAILABLE CATEGORIES FOR TRIVIA

artliterature
language
sciencenature
general
fooddrink
peopleplaces
geography
historyholidays
entertainment
toysgames
music
mathematics
religionmythology
sportsleisure

*/
const Home: NextPage = () => {
  const [question, setQuestion] = useState("Click the button");
  const [correctAnswer, setCorrectAnswer] = useState("");
  const [firstTry, setFirstTry] = useState(true);
  const [isWinning, userHasWon] = useState(false);
  const [visibility, setVisibility] = useState(false);
  const [cat, setCat] = useState(Object);
 

  const[savedCats, saveThisCat] = useState([{}]);

  const [inputVisibility, setInputVisibility] = useState(false);
  // const [fact, setFact] = useState("");
  const [score, setPlayerScore] = useState(0);
  const [userHint, setHint] = useState("");



  const clickHandler = async () => {
    if (firstTry) {
      setFirstTry(false);
    }
    console.log("IS first try: ", firstTry);
    setHint("");
    const data = await getTriviaFromAPI();
    const cat = await getCatFromAPI();
    //const myFact = await getFactFromAPI();
    // setFact(myFact);
    console.log("!CAT", cat);
    setCat(cat);
    setQuestion(data[0].question);
    setCorrectAnswer(data[0].answer);
    setVisibility(false);
    userHasWon(false);
    setInputVisibility(true);
  };

  const increaseScore = () => {
    setPlayerScore((score) => score + 1);
  };

  const decreaseScore = (amount:number) => {
    for(let i = 0; i < amount; i++){
      setPlayerScore((score) => score - 1);
    }
   
  };

  const answerHandler = async () => {
    console.log("Checking answers...");
    const userInput = document.getElementById(
      "fname"
    ) as HTMLInputElement | null;
    const value = userInput?.value;
    console.log("The correct answer was [" + correctAnswer + "]");
    if (correctAnswer.toLowerCase() === value?.toLowerCase()) {
      userHasWon(true);
      setVisibility(false);
      setInputVisibility(false);
      saveThisCat(cat);
      increaseScore();
    }
  };
  const showCat = () => {
    setVisibility(true);
    userHasWon(false);
  };


  const showHint = () => {
    const first = correctAnswer.charAt(0);
    setHint(first.toString());
  };
  const cheat = () => {
    setPlayerScore(1000);
    console.log(correctAnswer);
    const textArea = document.getElementById(
      "fname"
    ) as HTMLInputElement | null;
    if(textArea != null){
      textArea.value=correctAnswer;
    }

  };

  let price = 0;
  const saveCat = () => {
    console.log("You saved", cat);

    console.log("price:", price);
    if(price < score){
      decreaseScore(price);
    }else{
      alert("You cant afford that cat");
    }
    setVisibility(false);
  };

  

  const setBorderColor = () => {
    const border = pickRandomBorder();

    if(border==="border-legendary"){
      price=20;
    }
    if(border ==="border-epic"){
      price=10;
    }
    if(border === "border-rare"){
      price = 5;
    }
    if(border === "border-uncommon"){
      price = 3
    }
    if(border ==="border-common"){
      price=2;
    }
    if(border==="border-trash"){
      price=1;
    }
    console.log(border);
    return border;
  };

  const printAllSavedCats = () =>{
    console.log(savedCats);
  }

  return (
    <>
      <Head>
        <title>cats cats cats cats cats cats cats cats cats</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" display:flex min-h-screen bg-gradient-to-t from-background_dark to-background_bright">
        {firstTry ? (
          <div>
            <div className="text-center text-xl font-bold">
              Welcome to the cat trivia, press the button
            </div>
            <div className="text-xs">noob score...lol</div>
          </div>
        ) : (
          <div className="text-sm">nice score</div>
        )}
        <p className="text-#a3c8e5 inline-flex items-center rounded p-2 text-xl font-semibold">
          {score}
        </p>
        <button
          onClick={cheat}
          className="absolute right-80 left-80 rounded-full bg-blue_light py-2 px-4 font-bold text-white hover:bg-blue_dark"
        >
          {" "}
          Cheat
        </button>
        <div>
          {inputVisibility ? (
            <div>
              
              <h3 className="text-gray-900 text-center text-xl font-bold">
                {" "}
                {question}
              </h3>
              <div>
                <div className="text-center"> {userHint}</div>
              </div>
            </div>
          ) : (
            <div></div>
          )}
          {inputVisibility ? (
            <div className="grid h-screen place-items-center">
              <textarea
                className=" text-black relative bg-text_field py-2 px-4 font-bold hover:bg-text_dark"
                id="fname"
                name="fname"
              ></textarea>
              <button
                className=" relative rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-blue_dark"
                onClick={answerHandler}
              >
                Submit
              </button>{" "}
              <button
                className=" absolute left-0 top-80 rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-blue_dark"
                onClick={showHint}
              >
                Get Hint
              </button>
            </div>
          ) : (
            <div></div>
          )}
          <div className="">
            {visibility ? (
              <div className=" grid h-screen place-items-center">
                <Image
                  className={`${setBorderColor()} border-solid h-auto w-auto rounded-lg border-8 object-cover`}
                  src={cat.props.data[0].url}
                  alt=""
                  width={cat.props.data[0].width} 
                  height={cat.props.data[0].width}
                ></Image>
                <button
                  onClick={saveCat}
                  className="bg-text_field relative rounded-full  py-2 px-4 font-bold text-white  hover:bg-blue_dark"
                >
                  Joink cat
                </button>
              </div>
            ) : (
              <div></div>
            )}
            {isWinning ? (
              <div className="grid h-screen place-items-center">
                <button
                  className="absolute rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-uncommon"                  onClick={showCat}
                >
                  SHOW CAT
                </button>
              </div>
            ) : (
              <div>
                {firstTry ? (
                  <div>
                    <button
                      className="absolute top-80 right-5 rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-blue_dark"
                      onClick={clickHandler}
                    >
                      THE BUTTON
                    </button>
                  </div>
                ) : (
                  <div>
                    <button
                      className="absolute top-80 right-5 rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-blue_dark"
                      onClick={clickHandler}
                    >
                      Next
                    </button>
                    <button className="absolute top-5  right-5 rounded-full bg-text_field py-2 px-4 font-bold text-white hover:bg-blue_dark" onClick ={printAllSavedCats}
                    >Collection</button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
